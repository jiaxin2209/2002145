pipeline{
    agent any
    stages{
        stage('Checkout'){
            steps{
                echo 'Successfully Checkout'
            }
        }
        stage('Dependency Check'){
            steps{
                dependencyCheck additionalArguments: '--format HTML --format XML --suppresion suppresion.xml', odcInstallation: 'Default'
            }
        }
        stage('Testing'){
            steps{
                echo 'Selenium Testing here'
            }
        }
        stage('SonarQube'){
            steps{
                script{
                    def scannerHome = tool 'SonarQube'
                    withSonarQubeEnv('SonarQube'){
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projecKey=OWASP-Dsonar.sources=."
                    }
                }
            }
        }
        post{
            always{
                recordIssues enabledForFailure: true, tool: SonarQube()
            }
        }

    }
}